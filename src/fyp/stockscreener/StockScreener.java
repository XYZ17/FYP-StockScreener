/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fyp.stockscreener;

import fyp.database.DatabaseConnection;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Lim
 */
public class StockScreener extends javax.swing.JFrame {

    /**
     * Creates new form StockScreener
     */
    
    private double Rule_Range = 1.00;
    
    DatabaseConnection dc = new DatabaseConnection();
    
    public StockScreener() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_ScreenerResults = new javax.swing.JTable();
        jLabel_SelectRule = new javax.swing.JLabel();
        jComboBox_ScreeningRule = new javax.swing.JComboBox<>();
        jButton_StartScreening = new javax.swing.JButton();
        jLabel_ScreeningResults = new javax.swing.JLabel();
        FoundResultsTotal = new javax.swing.JLabel();
        jLabel_SelectRule1_Formula = new javax.swing.JLabel();
        jComboBox_ScreeningRange = new javax.swing.JComboBox<>();
        jLabel_SelectRule2_Range = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTable_ScreenerResults.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Stock Symbol", "Stock Code", "Stock Name", "Low", "High", "Prev", "Last", "Benjamin Graham Formula", "Discounted Earning Model", "Gordon Growth Model"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_ScreenerResults.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable_ScreenerResults.setSelectionBackground(new java.awt.Color(0, 255, 255));
        jScrollPane1.setViewportView(jTable_ScreenerResults);
        jTable_ScreenerResults.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        jLabel_SelectRule.setText("Select Screening Rule : ");

        jComboBox_ScreeningRule.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ALL", "Benjamin Graham Formula", "Discounted Earning Model", "Gordon Growth Model" }));
        jComboBox_ScreeningRule.addActionListener(new ActionListener()
            {
                public void actionPerformed(ActionEvent e) {
                    JComboBox jComboBox_ScreeningRule = (JComboBox)e.getSource();
                    if (jComboBox_ScreeningRule.getSelectedItem().equals("ALL")) {
                        jComboBox_ScreeningRange.setEnabled(false);
                    }
                    else{
                        jComboBox_ScreeningRange.setEnabled(true);
                    }
                }
            }
        );

        jButton_StartScreening.setText("Start Screening");
        jButton_StartScreening.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_StartScreeningActionPerformed(evt);
            }
        });

        jLabel_ScreeningResults.setText("Results of Screening: ");

        DefaultTableModel model = (DefaultTableModel) jTable_ScreenerResults.getModel();
        FoundResultsTotal.setText(" ");

        jLabel_SelectRule1_Formula.setText("Formula used: ");

        jComboBox_ScreeningRange.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Price < Intrinsic Value", "Less than 80%", "Less than 50%", "Less than 20%" }));
        jComboBox_ScreeningRange.setSelectedItem("Price < Intrinsic Value");
        jComboBox_ScreeningRange.setEnabled(false);
        jComboBox_ScreeningRange.addActionListener(new ActionListener()
            {
                public void actionPerformed(ActionEvent e) {
                    JComboBox jComboBox_ScreeningRange = (JComboBox)e.getSource();
                    switch(jComboBox_ScreeningRange.getSelectedItem().toString())
                    {
                        case("Price < Intrinsic Value"):
                        setRange(1.00);
                        break;
                        case("Less than 80%"):
                        setRange(0.80);
                        break;
                        case("Less than 50%"):
                        setRange(0.50);
                        break;
                        case("Less than 20%"):
                        setRange(0.20);
                        break;
                        default:
                        setRange(1.00);
                        break;
                    }
                }
            }
        );

        jLabel_SelectRule2_Range.setText("Range between prices:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 753, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel_SelectRule)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton_StartScreening, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel_SelectRule2_Range)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox_ScreeningRange, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel_ScreeningResults)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel_SelectRule1_Formula)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jComboBox_ScreeningRule, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addComponent(FoundResultsTotal)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_SelectRule)
                    .addComponent(jButton_StartScreening))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBox_ScreeningRange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel_SelectRule2_Range))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBox_ScreeningRule, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel_SelectRule1_Formula)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel_ScreeningResults)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(FoundResultsTotal)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setRange(double Rule_Range){
        this.Rule_Range = Rule_Range;
    }
    
    private double getRange(){
        return Rule_Range;
    }
    private void showScreenerTable(String sql){
        try{
            dc.stm = dc.conn.createStatement();
            dc.rs = dc.stm.executeQuery(sql);
            
            while(dc.rs.next()){
                   String Stock_Symbol = dc.rs.getString(1);
                   String Stock_Code = dc.rs.getString(2);
                   String Stock_Name = dc.rs.getString(3);
                   double Stock_Low = dc.rs.getDouble(4);
                   double Stock_High = dc.rs.getDouble(5);
                   double Stock_Prev = dc.rs.getDouble(6);
                   double Stock_Last = dc.rs.getDouble(7);
                   double Stock_BGF = dc.rs.getDouble(8);
                   double Stock_DEM = dc.rs.getDouble(9);
                   double Stock_GGM = dc.rs.getDouble(10);

                    Object[] content = {Stock_Symbol, Stock_Code, Stock_Name, Stock_Low, Stock_High, Stock_Prev, Stock_Last, Stock_BGF, Stock_DEM,Stock_GGM};
                    DefaultTableModel model = (DefaultTableModel) jTable_ScreenerResults.getModel();
                    model.addRow(content);
            }
        }catch(Exception e){
                e.printStackTrace();
        }
    }
    
    private void UpdateTable(String sql){
        DefaultTableModel model = (DefaultTableModel) jTable_ScreenerResults.getModel();
        while(model.getRowCount() >  0){
            model.setRowCount(0);
        }
        showScreenerTable(sql);
        FoundResultsTotal.setText("Found " + model.getRowCount() + " results.");
    }
    
    private void jButton_StartScreeningActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_StartScreeningActionPerformed
        if(jButton_StartScreening == evt.getSource()) {
		String Rule_Formula = jComboBox_ScreeningRule.getSelectedItem().toString();
		String Rule_Range = jComboBox_ScreeningRange.getSelectedItem().toString();
                String sql = "";
                if(Rule_Formula == "ALL")
                {
                    sql = "SELECT * FROM `stock` WHERE `Stock_Last` < `Stock_BGF` AND `Stock_Last` < `Stock_DEM` OR `Stock_Last` <  `Stock_GGM`";
                }
                else
                {
                    switch(Rule_Formula)
                    {
                        case "Benjamin Graham Formula":
                             sql = "SELECT * FROM `stock` WHERE `Stock_Last` < (" + getRange() + " * Stock_BGF);";
                             break;
                        case "Discounted Earning Model": 
                             sql = "SELECT * FROM `stock` WHERE `Stock_Last` < (" + getRange() + " * Stock_DEM);";
                             break;
                        case "Gordon Growth Model":
                             sql = "SELECT * FROM `stock` WHERE `Stock_Last` < (" + getRange() + " * Stock_GGM);";
                             break;
                    }
                }
                UpdateTable(sql);
	}
    }//GEN-LAST:event_jButton_StartScreeningActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StockScreener.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StockScreener.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StockScreener.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StockScreener.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StockScreener().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel FoundResultsTotal;
    private javax.swing.JButton jButton_StartScreening;
    private javax.swing.JComboBox<String> jComboBox_ScreeningRange;
    private javax.swing.JComboBox<String> jComboBox_ScreeningRule;
    private javax.swing.JLabel jLabel_ScreeningResults;
    private javax.swing.JLabel jLabel_SelectRule;
    private javax.swing.JLabel jLabel_SelectRule1_Formula;
    private javax.swing.JLabel jLabel_SelectRule2_Range;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable_ScreenerResults;
    // End of variables declaration//GEN-END:variables
}
