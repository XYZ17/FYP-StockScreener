/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fyp.stockscreener;

/**
 *
 * @author Lim
 */
import fyp.database.DatabaseConnection;
import fyp.database.DatabaseFunction;
import java.awt.*;
import java.awt.event.*;
import static java.lang.Math.abs;
import java.text.DecimalFormat;
import java.util.*;
import javax.swing.*;
import javax.swing.JComboBox;
import javax.swing.event.*;
import javax.swing.table.DefaultTableModel;
public class Dashboard extends javax.swing.JFrame implements MouseListener,ActionListener{
    
    DatabaseConnection dc = new DatabaseConnection();
    DatabaseFunction df = new DatabaseFunction();
    ReadWriteDate rwDate = new ReadWriteDate();
    
    private ArrayList<String> StkCodeList = new ArrayList<>();
    private final ArrayList<String> StkEPS = new ArrayList<>();
    private final ArrayList<String> StkDPS = new ArrayList<>();
    String StkCode = "";
        
    public Dashboard() {
        
        initComponents();
        setIcon();
        jTabbedPane1.setEnabledAt(1,false);
        setStkCodeList();
        setupAutoComplete(SearchField, StkCodeList);
        showFATable();
        SelectedRow();
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel_Find = new javax.swing.JLabel();
        SearchField = new javax.swing.JTextField();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        WatchlistPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_FA = new javax.swing.JTable();
        IVPanel = new javax.swing.JPanel();
        jLable_IVStkSbl = new javax.swing.JLabel();
        IVStkSbl = new javax.swing.JLabel();
        jLable_IVStkCode = new javax.swing.JLabel();
        IVStkCode = new javax.swing.JLabel();
        jLable_IVStkName = new javax.swing.JLabel();
        IVStkName = new javax.swing.JLabel();
        jLable_IVStkData = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable_IVDetails = new javax.swing.JTable();
        jLabel_IVPerShare = new javax.swing.JLabel();
        jLable_IVGGM = new javax.swing.JLabel();
        IVGGM = new javax.swing.JLabel();
        Compare_GGM = new javax.swing.JLabel();
        jLable_IVDEM = new javax.swing.JLabel();
        IVDEM = new javax.swing.JLabel();
        Compare_DEM = new javax.swing.JLabel();
        jLable_IVBGF = new javax.swing.JLabel();
        IVBGF = new javax.swing.JLabel();
        Compare_BGF = new javax.swing.JLabel();
        jLabel_LatestPrice = new javax.swing.JLabel();
        LatestPrice = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel_LastUpdate = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu_File = new javax.swing.JMenu();
        jMenuItem_ScreenStock = new javax.swing.JMenuItem();
        jMenuItem_File_Exit = new javax.swing.JMenuItem();
        jMenu_Edit = new javax.swing.JMenu();
        jMenuItem_Refresh = new javax.swing.JMenuItem();
        jMenu_Country = new javax.swing.JMenu();
        jMenuItem_Cty_Msia = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Stock Screener Application");
        setForeground(java.awt.Color.white);

        jLabel_Find.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel_Find.setText("Find");

        //SearchField.addActionListener(action);
        SearchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchFieldActionPerformed(evt);
            }
        });

        jTable_FA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Stock Symbol", "Stock Code", "Stock Name", "Low", "High", "Prev", "Last", "Benjamin Graham Formula", "Discounted Earning Model", "Gordon Growth Model"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_FA.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable_FA.setSelectionBackground(new java.awt.Color(0, 255, 255));
        jTable_FA.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jScrollPane1.setViewportView(jTable_FA);
        jTable_FA.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        if (jTable_FA.getColumnModel().getColumnCount() > 0) {
            jTable_FA.getColumnModel().getColumn(0).setResizable(false);
            jTable_FA.getColumnModel().getColumn(1).setResizable(false);
            jTable_FA.getColumnModel().getColumn(3).setResizable(false);
            jTable_FA.getColumnModel().getColumn(4).setResizable(false);
            jTable_FA.getColumnModel().getColumn(5).setResizable(false);
            jTable_FA.getColumnModel().getColumn(6).setResizable(false);
            jTable_FA.getColumnModel().getColumn(7).setResizable(false);
            jTable_FA.getColumnModel().getColumn(8).setResizable(false);
            jTable_FA.getColumnModel().getColumn(9).setResizable(false);
        }

        javax.swing.GroupLayout WatchlistPanelLayout = new javax.swing.GroupLayout(WatchlistPanel);
        WatchlistPanel.setLayout(WatchlistPanelLayout);
        WatchlistPanelLayout.setHorizontalGroup(
            WatchlistPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        WatchlistPanelLayout.setVerticalGroup(
            WatchlistPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, WatchlistPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(378, 378, 378))
        );

        jTabbedPane1.addTab("Stock Watchlist", WatchlistPanel);

        jLable_IVStkSbl.setText("Stock Symbol  :");

        jLable_IVStkCode.setText("Stock Code     :");

        jLable_IVStkName.setText("Stock Name    :");

        jLable_IVStkData.setText("Stock Data      :");

        jTable_IVDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Year", "Dividend Per Share (in Cents)", "Dividend Growth Rate (in Percentage)", "Earning Per Share (in Cents)", "Revenue (in Million)", "Gross Profit (in Million)", "Net Income (in Million)", "Free Cash Flow (in Million)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_IVDetails.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTable_IVDetails);
        if (jTable_IVDetails.getColumnModel().getColumnCount() > 0) {
            jTable_IVDetails.getColumnModel().getColumn(0).setResizable(false);
            jTable_IVDetails.getColumnModel().getColumn(1).setResizable(false);
            jTable_IVDetails.getColumnModel().getColumn(2).setResizable(false);
            jTable_IVDetails.getColumnModel().getColumn(3).setResizable(false);
            jTable_IVDetails.getColumnModel().getColumn(4).setResizable(false);
            jTable_IVDetails.getColumnModel().getColumn(5).setResizable(false);
            jTable_IVDetails.getColumnModel().getColumn(6).setResizable(false);
            jTable_IVDetails.getColumnModel().getColumn(7).setResizable(false);
        }

        jLabel_IVPerShare.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jLabel_IVPerShare.setText("Intrinsic Value per share : ");

        jLable_IVGGM.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLable_IVGGM.setText("Gordon Growth Model         : ");

        IVGGM.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        Compare_GGM.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jLable_IVDEM.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLable_IVDEM.setText("Discounted Earings Model   : ");

        IVDEM.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        Compare_DEM.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jLable_IVBGF.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLable_IVBGF.setText("Benjamin Graham Formula   : ");

        IVBGF.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        Compare_BGF.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jLabel_LatestPrice.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        jLabel_LatestPrice.setText("Latest Price                     :  MYR");

        LatestPrice.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N

        javax.swing.GroupLayout IVPanelLayout = new javax.swing.GroupLayout(IVPanel);
        IVPanel.setLayout(IVPanelLayout);
        IVPanelLayout.setHorizontalGroup(
            IVPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IVPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(IVPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1605, Short.MAX_VALUE)
                    .addGroup(IVPanelLayout.createSequentialGroup()
                        .addGroup(IVPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(IVPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, IVPanelLayout.createSequentialGroup()
                                    .addComponent(jLable_IVStkSbl, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(IVStkSbl, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, IVPanelLayout.createSequentialGroup()
                                    .addGroup(IVPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLable_IVStkName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLable_IVStkData, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(IVStkName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(IVPanelLayout.createSequentialGroup()
                                .addComponent(jLable_IVStkCode, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(IVStkCode, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel_IVPerShare)
                            .addGroup(IVPanelLayout.createSequentialGroup()
                                .addGroup(IVPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel_LatestPrice, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLable_IVGGM, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLable_IVDEM, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLable_IVBGF, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(IVPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(IVPanelLayout.createSequentialGroup()
                                        .addGap(41, 41, 41)
                                        .addGroup(IVPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(IVDEM)
                                            .addComponent(IVGGM)
                                            .addGroup(IVPanelLayout.createSequentialGroup()
                                                .addComponent(IVBGF)
                                                .addGap(169, 169, 169)
                                                .addGroup(IVPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(Compare_DEM)
                                                    .addComponent(Compare_GGM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(Compare_BGF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                                    .addGroup(IVPanelLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(LatestPrice)))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        IVPanelLayout.setVerticalGroup(
            IVPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IVPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(IVPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLable_IVStkSbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(IVStkSbl, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(IVPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLable_IVStkCode)
                    .addComponent(IVStkCode, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(IVPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLable_IVStkName)
                    .addComponent(IVStkName, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLable_IVStkData)
                .addGap(10, 10, 10)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(IVPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_LatestPrice)
                    .addComponent(LatestPrice))
                .addGap(15, 15, 15)
                .addComponent(jLabel_IVPerShare)
                .addGap(18, 18, 18)
                .addGroup(IVPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLable_IVBGF)
                    .addComponent(IVBGF)
                    .addComponent(Compare_BGF))
                .addGap(45, 45, 45)
                .addGroup(IVPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLable_IVDEM)
                    .addComponent(IVDEM)
                    .addComponent(Compare_DEM))
                .addGap(50, 50, 50)
                .addGroup(IVPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLable_IVGGM)
                    .addComponent(IVGGM)
                    .addComponent(Compare_GGM))
                .addContainerGap(91, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Intrinsic Value", IVPanel);

        jLabel_LastUpdate.setText("Stock last update: " + rwDate.ReadDate());

        jMenu_File.setText("File");

        jMenuItem_ScreenStock.setText("Screen Stock");
        jMenuItem_ScreenStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_ScreenStockActionPerformed(evt);
            }
        });
        jMenu_File.add(jMenuItem_ScreenStock);

        jMenuItem_File_Exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem_File_Exit.setText("Exit");
        jMenuItem_File_Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_File_ExitActionPerformed(evt);
            }
        });
        jMenu_File.add(jMenuItem_File_Exit);

        jMenuBar1.add(jMenu_File);

        jMenu_Edit.setText("Edit");

        jMenuItem_Refresh.setText("Refresh Stock Price");
        jMenuItem_Refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_RefreshActionPerformed(evt);
            }
        });
        jMenu_Edit.add(jMenuItem_Refresh);

        jMenuBar1.add(jMenu_Edit);

        jMenu_Country.setText("Country");

        jMenuItem_Cty_Msia.setText("Malaysia");
        jMenu_Country.add(jMenuItem_Cty_Msia);

        jMenuBar1.add(jMenu_Country);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel_Find)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(SearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel_LastUpdate)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_Find))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 599, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel_LastUpdate)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void setIcon(){
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("icon.png")));
    }
    private void showFATable(){
        try{
            String sql = "SELECT * FROM `stock` ORDER BY `Stock_Code` ASC;";
            dc.stm = dc.conn.createStatement();
            dc.rs = dc.stm.executeQuery(sql);
            
            while(dc.rs.next()){
                   String Stock_Symbol = dc.rs.getString(1);
                   String Stock_Code = dc.rs.getString(2);
                   String Stock_Name = dc.rs.getString(3);
                   double Stock_Low = dc.rs.getDouble(4);
                   double Stock_High = dc.rs.getDouble(5);
                   double Stock_Prev = dc.rs.getDouble(6);
                   double Stock_Last = dc.rs.getDouble(7);
                   double Stock_BGF = dc.rs.getDouble(8);
                   double Stock_DEM = dc.rs.getDouble(9);
                   double Stock_GGM = dc.rs.getDouble(10);

                    Object[] content = {Stock_Symbol, Stock_Code, Stock_Name, Stock_Low, Stock_High, Stock_Prev, Stock_Last, Stock_BGF, Stock_DEM,Stock_GGM};
                    DefaultTableModel model = (DefaultTableModel) jTable_FA.getModel();
                    model.addRow(content);
            }
        }catch(Exception e){
                JOptionPane.showMessageDialog(null, "Database not connected. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
                System.exit(0);
        }
    }
    
    private void showDetailsTable(String sql){
        try{
            dc.stm = dc.conn.createStatement();
            dc.rs = dc.stm.executeQuery(sql);
            
            while(dc.rs.next()){
                   String Year = dc.rs.getString(1);
                   double DividendPerShare = dc.rs.getDouble(2);
                   double DividendGrowth = dc.rs.getDouble(3);
                   double EarningPerShare = dc.rs.getDouble(4);
                   double Revenue = dc.rs.getDouble(5);
                   double GrossProfit = dc.rs.getDouble(6);
                   double NetIncome = dc.rs.getDouble(7);
                   double FreeCashFlow = dc.rs.getDouble(8);

                    Object[] content = {Year, DividendPerShare, DividendGrowth, EarningPerShare, Revenue, NetIncome, GrossProfit, FreeCashFlow};
                    DefaultTableModel model = (DefaultTableModel) jTable_IVDetails.getModel();
                    model.addRow(content);
            }
        }catch(Exception e){
                JOptionPane.showMessageDialog(null, "Database not connected. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
        }
    }
    
    private void UpdateDetailsTable(String sql){
        DefaultTableModel model = (DefaultTableModel) jTable_IVDetails.getModel();
        while(model.getRowCount() >  0){
            model.setRowCount(0);
        }
        showDetailsTable(sql);
    }
    
    private void setStkCodeList()
    {
        StkCodeList = df.getStockCodeList();
    }
    
    private ArrayList<String> getStkCodeList()
    {return StkCodeList;};
    
     private boolean isAdjusting(JComboBox cbInput) {
        if (cbInput.getClientProperty("is_adjusting") instanceof Boolean) {
            return (Boolean) cbInput.getClientProperty("is_adjusting");
        }
        return false;
    }

    private void setAdjusting(JComboBox cbInput, boolean adjusting) {
        cbInput.putClientProperty("is_adjusting", adjusting);
    }

    public void setupAutoComplete(final JTextField SearchField, final ArrayList<String> items) {
        final DefaultComboBoxModel model = new DefaultComboBoxModel();
        final JComboBox cbInput = new JComboBox(model) {
            public Dimension getPreferredSize() {
                return new Dimension(super.getPreferredSize().width, 0);
            }
        };
        setAdjusting(cbInput, false);
        for (String item : items) {
            model.addElement(item);
        }
        cbInput.setSelectedItem(null);
        cbInput.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (!isAdjusting(cbInput)) {
                    if (cbInput.getSelectedItem() != null) {
                        SearchField.setText(cbInput.getSelectedItem().toString());
                    }
                }
            }
        });

        SearchField.addKeyListener(new KeyAdapter() {

            @Override
            public void keyPressed(KeyEvent e) {
                setAdjusting(cbInput, true);
                if (e.getKeyCode() == KeyEvent.VK_SPACE) {
                    if (cbInput.isPopupVisible()) {
                        e.setKeyCode(KeyEvent.VK_ENTER);
                    }
                }
                if (e.getKeyCode() == KeyEvent.VK_ENTER || e.getKeyCode() == KeyEvent.VK_UP || e.getKeyCode() == KeyEvent.VK_DOWN) {
                    e.setSource(cbInput);
                    cbInput.dispatchEvent(e);
                    if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                        String selectedStk = cbInput.getSelectedItem().toString();
                        SearchField.setText(selectedStk);
                        jTabbedPane1.setSelectedIndex(0);
                        jTable_FA.setRowSelectionInterval(StkCodeList.indexOf(selectedStk),StkCodeList.indexOf(selectedStk));  //StkCodeList.indexOf(selectedStk)
                        jTable_FA.scrollRectToVisible(new Rectangle(jTable_FA.getCellRect(StkCodeList.indexOf(selectedStk), 0, true)));
                        SearchField.setText("");
                        cbInput.setPopupVisible(false);
                    }
                }
                if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {
                    cbInput.setPopupVisible(false);
                }
                setAdjusting(cbInput, false);
            }
        });
        SearchField.getDocument().addDocumentListener(new DocumentListener() {
            public void insertUpdate(DocumentEvent e) {
                updateList();
            }

            public void removeUpdate(DocumentEvent e) {
                updateList();
            }

            public void changedUpdate(DocumentEvent e) {
                updateList();
            }

            private void updateList() {
                setAdjusting(cbInput, true);
                model.removeAllElements();
                String input = SearchField.getText();
                if (!input.isEmpty()) {
                    for (String item : items) {
                        if (item.toLowerCase().startsWith(input.toLowerCase())) {
                            model.addElement(item);
                        }
                    }
                }
                cbInput.updateUI();
                cbInput.setPopupVisible(model.getSize() > 0);
                setAdjusting(cbInput, false);
            }
        });
        SearchField.setLayout(new BorderLayout());
        SearchField.add(cbInput, BorderLayout.SOUTH);
    }

    private void SelectedRow(){
        jTable_FA.addMouseListener
            (
                new MouseAdapter()
                {
                    public void mouseClicked(MouseEvent e) {
                        if (e.getClickCount() == 2) {
                            String StkSymbol = jTable_FA.getValueAt(jTable_FA.getSelectedRow(), 0).toString();
                            String StkCode = jTable_FA.getValueAt(jTable_FA.getSelectedRow(), 1).toString();
                            String StkName = jTable_FA.getValueAt(jTable_FA.getSelectedRow(), 2).toString();
                            double LastStkPrice = Double.parseDouble(jTable_FA.getValueAt(jTable_FA.getSelectedRow(), 6).toString());
                            String BGFValue = jTable_FA.getValueAt(jTable_FA.getSelectedRow(), 7).toString();
                            double BGF = Double.parseDouble(BGFValue);
                            String DEMValue = jTable_FA.getValueAt(jTable_FA.getSelectedRow(), 8).toString();
                            double DEM = Double.parseDouble(DEMValue);
                            String GGMValue = jTable_FA.getValueAt(jTable_FA.getSelectedRow(), 9).toString();
                            double GGM = Double.parseDouble(GGMValue);
                            
                            String sql = "SELECT dps.DPS_Year, dps.DPS_Value, dps.DPS_GrowthRate, eps.EPS_Value, r.Revenue_Value, nI.NetIncome_Value, gP.GProfit_Value, fcf.FCF_Value FROM dividendpershare AS dps JOIN earningpershare AS eps ON dps.Stock_Code = eps.Stock_Code AND dps.DPS_Year = eps.EPS_Year JOIN revenue AS r ON dps.Stock_Code = r.Stock_Code AND dps.DPS_Year = r.Revenue_Year JOIN grossprofit as gP ON dps.Stock_Code = gP.Stock_Code AND dps.DPS_Year = gP.GProfit_Year JOIN netincome as nI ON dps.Stock_Code = nI.Stock_Code AND dps.DPS_Year = nI.NetIncome_Year JOIN freecashflow as fcf ON dps.Stock_Code = fcf.Stock_Code AND dps.DPS_Year = fcf.FCF_Year WHERE dps.Stock_Code = '"+ StkCode +"' AND eps.Stock_Code = '"+ StkCode +"' AND fcf.Stock_Code = '"+ StkCode +"' AND gP.Stock_Code = '"+ StkCode +"' AND nI.Stock_Code = '"+ StkCode +"'AND fcf.Stock_Code = '"+ StkCode +"'LIMIT 6;";
                            IVStkName.setText(StkName);
                            IVStkSbl.setText(StkSymbol);
                            IVStkCode.setText(StkCode);
                            IVStkName.setText(StkName);
                            LatestPrice.setText(Double.toString(LastStkPrice));
                            
                            Compare_BGF.setText(compareDouble(LastStkPrice,BGF));
                            Compare_DEM.setText(compareDouble(LastStkPrice,DEM));
                            Compare_GGM.setText(compareDouble(LastStkPrice,GGM));
        
                            if(BGF < 0.0)
                            {
                                IVBGF.setForeground(Color.red);
                                IVBGF.setText("MYR " + BGFValue);
                            }
                            else
                            {   
                                IVBGF.setForeground(Color.black);
                                IVBGF.setText("MYR " + BGFValue);
                            }
                            if(DEM < 0.0)
                            {
                                IVDEM.setForeground(Color.red);
                                IVDEM.setText("MYR " + DEMValue);
                            }
                            else
                            {   
                                IVDEM.setForeground(Color.black);
                                IVDEM.setText("MYR " + DEMValue);
                            }
                            
                            if(GGM < 0.0)
                            {
                                IVGGM.setForeground(Color.red);
                                IVGGM.setText("MYR " + GGMValue);
                            }
                            else
                            {   
                                IVGGM.setForeground(Color.black);
                                IVGGM.setText("MYR " + GGMValue);
                            }
                            
                            
                            UpdateDetailsTable(sql);
                            jTabbedPane1.setEnabledAt(1,true);
                            jTabbedPane1.setSelectedIndex(1);
                        }
                     }
                }
            );
    }
    
    public void ScreenerToIVPanel(String StkSymbol,String StkCode,String StkName,String BGFValue, String DEMValue,String GGMValue, String sql){
        IVStkSbl.setText(StkSymbol);
        IVStkCode.setText(StkCode);
        IVStkName.setText(StkName);
        if(Double.parseDouble(BGFValue) < 0.0)
        {
            IVBGF.setForeground(Color.red);
            IVBGF.setText("MYR " + BGFValue);
        }
        else
        {   
            IVBGF.setForeground(Color.black);
            IVBGF.setText("MYR " + BGFValue);
        }
        if(Double.parseDouble(DEMValue) < 0.0)
        {
            IVDEM.setForeground(Color.red);
            IVDEM.setText("MYR " + DEMValue);
        }
        else
        {   
            IVDEM.setForeground(Color.black);
            IVDEM.setText("MYR " + DEMValue);
        }
        
        if(Double.parseDouble(GGMValue) < 0.0)
        {
            IVGGM.setForeground(Color.red);
            IVGGM.setText("MYR " + GGMValue);
        }
        else
        {   
            IVGGM.setForeground(Color.black);
            IVGGM.setText("MYR " + GGMValue);
        }
        UpdateDetailsTable(sql);
        jTabbedPane1.setEnabledAt(1,true);
        jTabbedPane1.setSelectedIndex(0);
    }
    
    private String compareDouble(double d1, double d2)
    {
        int compare = Double.compare(d1,d2);
        String compareResult = "";
        DecimalFormat decimalFormat = new DecimalFormat("#.##");
        
        if(compare > 0){
            float output = (float) (((d1-d2)/d2)*100);
            //float output = Float.valueOf(decimalFormat.format(f));
            compareResult = "(Latest Price is approximately "+ output + "% MORE than Intrinsic Value)";
            return compareResult;
        }
        else if(compare < 0 ){
            float f = (float) (((d2-d1)/d2)*100);
            float output = Float.valueOf(decimalFormat.format(f));
            compareResult = "(Latest Price is approximately "+ output + "% LESS than Intrinsic Value)";
            return compareResult;
        }
        else{
            return compareResult = "Both price are equally the same";
        }
    }
    
    private void jMenuItem_File_ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_File_ExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem_File_ExitActionPerformed

    private void SearchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchFieldActionPerformed
           
    }//GEN-LAST:event_SearchFieldActionPerformed

    private void jMenuItem_RefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_RefreshActionPerformed
        new UpdateWatchlist().UpdateWatchlist();
    }//GEN-LAST:event_jMenuItem_RefreshActionPerformed

    private void jMenuItem_ScreenStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_ScreenStockActionPerformed
        new StockScreener().setVisible(true);
    }//GEN-LAST:event_jMenuItem_ScreenStockActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Dashboard().setVisible(true);
            }
        });
    }
    /*
    Action action = new AbstractAction()
    {
      @Override
        public void actionPerformed(ActionEvent e)
        {
            JOptionPane.showMessageDialog(null, "Stock Not Found", "Error", JOptionPane.ERROR_MESSAGE);
        }
    };
*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JLabel Compare_BGF;
    public javax.swing.JLabel Compare_DEM;
    public javax.swing.JLabel Compare_GGM;
    public javax.swing.JLabel IVBGF;
    public javax.swing.JLabel IVDEM;
    public javax.swing.JLabel IVGGM;
    private javax.swing.JPanel IVPanel;
    public javax.swing.JLabel IVStkCode;
    public javax.swing.JLabel IVStkName;
    public javax.swing.JLabel IVStkSbl;
    public javax.swing.JLabel LatestPrice;
    private javax.swing.JTextField SearchField;
    private javax.swing.JPanel WatchlistPanel;
    private javax.swing.JLabel jLabel_Find;
    private javax.swing.JLabel jLabel_IVPerShare;
    private javax.swing.JLabel jLabel_LastUpdate;
    private javax.swing.JLabel jLabel_LatestPrice;
    private javax.swing.JLabel jLable_IVBGF;
    private javax.swing.JLabel jLable_IVDEM;
    private javax.swing.JLabel jLable_IVGGM;
    private javax.swing.JLabel jLable_IVStkCode;
    private javax.swing.JLabel jLable_IVStkData;
    private javax.swing.JLabel jLable_IVStkName;
    private javax.swing.JLabel jLable_IVStkSbl;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem_Cty_Msia;
    private javax.swing.JMenuItem jMenuItem_File_Exit;
    private javax.swing.JMenuItem jMenuItem_Refresh;
    private javax.swing.JMenuItem jMenuItem_ScreenStock;
    private javax.swing.JMenu jMenu_Country;
    private javax.swing.JMenu jMenu_Edit;
    private javax.swing.JMenu jMenu_File;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    public javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable_FA;
    private javax.swing.JTable jTable_IVDetails;
    // End of variables declaration//GEN-END:variables

    @Override
    public void mouseClicked(MouseEvent me) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mousePressed(MouseEvent me) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseReleased(MouseEvent me) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseEntered(MouseEvent me) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseExited(MouseEvent me) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void actionPerformed(ActionEvent ae) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
